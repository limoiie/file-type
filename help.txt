DESCRIPTION
     This manual page documents version 5.32 of the file command.

     file tests each argument in an attempt to classify it.  There are three sets of tests, performed in this order: filesystem
     tests, magic tests, and language tests.  The first test that succeeds causes the file type to be printed.

     The type printed will usually contain one of the words text (the file contains only printing characters and a few common control
     characters and is probably safe to read on an ASCII terminal), executable (the file contains the result of compiling a program
     in a form understandable to some UNIX kernel or another), or data meaning anything else (data is usually “binary” or non-print‐
     able).  Exceptions are well-known file formats (core files, tar archives) that are known to contain binary data.  When adding
     local definitions to /etc/magic, make sure to preserve these keywords.  Users depend on knowing that all the readable files in a
     directory have the word “text” printed.  Don't do as Berkeley did and change “shell commands text” to “shell script”.

     The filesystem tests are based on examining the return from a stat(2) system call.  The program checks to see if the file is
     empty, or if it's some sort of special file.  Any known file types appropriate to the system you are running on (sockets, sym‐
     bolic links, or named pipes (FIFOs) on those systems that implement them) are intuited if they are defined in the system header
     file <sys/stat.h>.

     The magic tests are used to check for files with data in particular fixed formats.  The canonical example of this is a binary
     executable (compiled program) a.out file, whose format is defined in <elf.h>, <a.out.h> and possibly <exec.h> in the standard
     include directory.  These files have a “magic number” stored in a particular place near the beginning of the file that tells the
     UNIX operating system that the file is a binary executable, and which of several types thereof.  The concept of a “magic” has
     been applied by extension to data files.  Any file with some invariant identifier at a small fixed offset into the file can usu‐
     ally be described in this way.  The information identifying these files is read from /etc/magic and the compiled magic file
     /usr/share/misc/magic.mgc, or the files in the directory /usr/share/misc/magic if the compiled file does not exist.  In addi‐
     tion, if $HOME/.magic.mgc or $HOME/.magic exists, it will be used in preference to the system magic files.

     If a file does not match any of the entries in the magic file, it is examined to see if it seems to be a text file.  ASCII,
     ISO-8859-x, non-ISO 8-bit extended-ASCII character sets (such as those used on Macintosh and IBM PC systems), UTF-8-encoded Uni‐
     code, UTF-16-encoded Unicode, and EBCDIC character sets can be distinguished by the different ranges and sequences of bytes that
     constitute printable text in each set.  If a file passes any of these tests, its character set is reported.  ASCII, ISO-8859-x,
     UTF-8, and extended-ASCII files are identified as “text” because they will be mostly readable on nearly any terminal; UTF-16 and
     EBCDIC are only “character data” because, while they contain text, it is text that will require translation before it can be
     read.  In addition, file will attempt to determine other characteristics of text-type files.  If the lines of a file are termi‐
     nated by CR, CRLF, or NEL, instead of the Unix-standard LF, this will be reported.  Files that contain embedded escape sequences
     or overstriking will also be identified.

     Once file has determined the character set used in a text-type file, it will attempt to determine in what language the file is
     written.  The language tests look for particular strings (cf.  <names.h>) that can appear anywhere in the first few blocks of a
     file.  For example, the keyword .br indicates that the file is most likely a troff(1) input file, just as the keyword struct
     indicates a C program.  These tests are less reliable than the previous two groups, so they are performed last.  The language
     test routines also test for some miscellany (such as tar(1) archives).

     Any file that cannot be identified as having been written in any of the character sets listed above is simply said to be “data”.

OPTIONS
     --apple
             Causes the file command to output the file type and creator code as used by older MacOS versions. The code consists of
             eight letters, the first describing the file type, the latter the creator.

     -b, --brief
             Do not prepend filenames to output lines (brief mode).

     -C, --compile
             Write a magic.mgc output file that contains a pre-parsed version of the magic file or directory.

     -c, --checking-printout
             Cause a checking printout of the parsed form of the magic file.  This is usually used in conjunction with the -m flag to
             debug a new magic file before installing it.

     -d      Prints internal debugging information to stderr.

     -E      On filesystem errors (file not found etc), instead of handling the error as regular output as POSIX mandates and keep
             going, issue an error message and exit.

     -e, --exclude testname
             Exclude the test named in testname from the list of tests made to determine the file type.  Valid test names are:

             apptype   EMX application type (only on EMX).

             ascii     Various types of text files (this test will try to guess the text encoding, irrespective of the setting of the
                       ‘encoding’ option).

             encoding  Different text encodings for soft magic tests.

             tokens    Ignored for backwards compatibility.

             cdf       Prints details of Compound Document Files.

             compress  Checks for, and looks inside, compressed files.

             elf       Prints ELF file details, provided soft magic tests are enabled and the elf magic is found.

             soft      Consults magic files.

             tar       Examines tar files.

             text      A synonym for ‘ascii’.

     --extension
             Print a slash-separated list of valid extensions for the file type found.

     -F, --separator separator
             Use the specified string as the separator between the filename and the file result returned.  Defaults to ‘:’.

     -f, --files-from namefile
             Read the names of the files to be examined from namefile (one per line) before the argument list.  Either namefile or at
             least one filename argument must be present; to test the standard input, use ‘-’ as a filename argument.  Please note
             that namefile is unwrapped and the enclosed filenames are processed when this option is encountered and before any fur‐
             ther options processing is done.  This allows one to process multiple lists of files with different command line argu‐
             ments on the same file invocation.  Thus if you want to set the delimiter, you need to do it before you specify the list
             of files, like: “-F @ -f namefile”, instead of: “-f namefile -F @”.

     -h, --no-dereference
             option causes symlinks not to be followed (on systems that support symbolic links).  This is the default if the environ‐
             ment variable POSIXLY_CORRECT is not defined.

     -i, --mime
             Causes the file command to output mime type strings rather than the more traditional human readable ones.  Thus it may
             say ‘text/plain; charset=us-ascii’ rather than “ASCII text”.

--mime-type, --mime-encoding
             Like -i, but print only the specified element(s).

     -k, --keep-going
             Don't stop at the first match, keep going.  Subsequent matches will be have the string ‘\012- ’ prepended.  (If you want
             a newline, see the -r option.)  The magic pattern with the highest strength (see the -l option) comes first.

     -l, --list
             Shows a list of patterns and their strength sorted descending by magic(4) strength which is used for the matching (see
             also the -k option).

     -L, --dereference
             option causes symlinks to be followed, as the like-named option in ls(1) (on systems that support symbolic links).  This
             is the default if the environment variable POSIXLY_CORRECT is defined.

     -m, --magic-file magicfiles
             Specify an alternate list of files and directories containing magic.  This can be a single item, or a colon-separated
             list.  If a compiled magic file is found alongside a file or directory, it will be used instead.

     -N, --no-pad
             Don't pad filenames so that they align in the output.

     -n, --no-buffer
             Force stdout to be flushed after checking each file.  This is only useful if checking a list of files.  It is intended
             to be used by programs that want filetype output from a pipe.

     -p, --preserve-date
             On systems that support utime(3) or utimes(2), attempt to preserve the access time of files analyzed, to pretend that
             file never read them.

     -P, --parameter name=value
             Set various parameter limits.

                   Name         Default    Explanation
                   indir        15         recursion limit for indirect magic
                   name         30         use count limit for name/use magic
                   elf_notes    256        max ELF notes processed
                   elf_phnum    128        max ELF program sections processed
                   elf_shnum    32768      max ELF sections processed
                   regex        8192       length limit for regex searches
                   bytes        1048576    max number of bytes to read from file

     -r, --raw
             Don't translate unprintable characters to \ooo.  Normally file translates unprintable characters to their octal repre‐
             sentation.

     -s, --special-files
             Normally, file only attempts to read and determine the type of argument files which stat(2) reports are ordinary files.
             This prevents problems, because reading special files may have peculiar consequences.  Specifying the -s option causes
             file to also read argument files which are block or character special files.  This is useful for determining the
             filesystem types of the data in raw disk partitions, which are block special files.  This option also causes file to
             disregard the file size as reported by stat(2) since on some systems it reports a zero size for raw disk partitions.

     -v, --version
             Print the version of the program and exit.

     -z, --uncompress
             Try to look inside compressed files.

     -Z, --uncompress-noreport
             Try to look inside compressed files, but report information about the contents only not the compression.

     -0, --print0
             Output a null character ‘\0’ after the end of the filename.  Nice to cut(1) the output.  This does not affect the sepa‐
             rator, which is still printed.

             If this option is repeated more than once, then file prints just the filename followed by a NUL followed by the descrip‐
             tion (or ERROR: text) followed by a second NUL for each entry.

     --help  Print a help message and exit.



